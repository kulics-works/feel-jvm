mod demo;

let a Float = 0.1 + 0.3;

let mut b Int = 321 - 300;

let c Int = 2 * 2;

let mut d Int = b + (c * 2);

let T Bool = true;

let F Bool = false;

let g() Int = 1 + 2 + 3 + b;

let add(a Int, b Int) Int = a + b;

let double(x Int) Int = add(x, x) + x + 1;

let blockExpr1 Int = {
    let a = 0;
    let b = 0;
    a + b
};

let blockExpr2() Int = {
    let a = 0;
    let b = 0;
    a + b
};

let blockExpr3 Void = {};

let compareExpr Void = {
    let a = 1;
    let b = 1;
    let c = a == b;
    let d = a > b;
    let e = a <> b;
    let f = a < b;
};

let logicExpr Void = {
    let a = true && true;
    let b = true || false;
};

let ifExpr1 Int = if(true) 0 else if(true) 0 else 0;

let ifExpr2 Int = if(true) { 0 } else { 1 };

let ifExpr3 Void = if(true) {} else {};

let ifStat Void = {
    if(true) {
        0;
    } else if(true) {
        1;
    } else {
        2;
    };
};

let assignment Void = {
    let mut a = 0;
    a = 1;
};

let whileStat() Void = {
    let mut i = 0;
    while (i <= 10) {
        i = i + 1;
    };
};

let localFunction() Int = {
    let f() = 123;
    let a = f();
    a
};

def Point(x Int, y Int) {
    copy() Point = Point(x, y);
    plus(other Point) Point = Point(x + other.x, y + other.y);
};
let somePoint Point = Point(1, 2);
let memberAccess(a Point, b Point) Point = Point(a.x+b.x, a.y+b.y).copy();

def Color is Red() | Green() | Blue();
let red Color = Red();

def IntList is Nil() | Cons(head Int, tail IntList) {
    sum() Int = 0;
};
let enum() Void = {
    let li IntList = Cons(1, Cons(2, Cons(3, Nil())));
    li.sum();
    Cons(1, Nil()).sum();
    Nil().sum();
};
